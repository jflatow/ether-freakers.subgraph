// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class Born extends ethereum.Event {
  get params(): Born__Params {
    return new Born__Params(this);
  }
}

export class Born__Params {
  _event: Born;

  constructor(event: Born) {
    this._event = event;
  }

  get mother(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get energy(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get freakerId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get freaker(): BornFreakerStruct {
    return this._event.parameters[3].value.toTuple() as BornFreakerStruct;
  }
}

export class BornFreakerStruct extends ethereum.Tuple {
  get species(): i32 {
    return this[0].toI32();
  }

  get stamina(): i32 {
    return this[1].toI32();
  }

  get fortune(): i32 {
    return this[2].toI32();
  }

  get agility(): i32 {
    return this[3].toI32();
  }

  get offense(): i32 {
    return this[4].toI32();
  }

  get defense(): i32 {
    return this[5].toI32();
  }
}

export class Captured extends ethereum.Event {
  get params(): Captured__Params {
    return new Captured__Params(this);
  }
}

export class Captured__Params {
  _event: Captured;

  constructor(event: Captured) {
    this._event = event;
  }

  get attacker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get defender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sourceId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get targetId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Missed extends ethereum.Event {
  get params(): Missed__Params {
    return new Missed__Params(this);
  }
}

export class Missed__Params {
  _event: Missed;

  constructor(event: Missed) {
    this._event = event;
  }

  get attacker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get defender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sourceId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get targetId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Thwarted extends ethereum.Event {
  get params(): Thwarted__Params {
    return new Thwarted__Params(this);
  }
}

export class Thwarted__Params {
  _event: Thwarted;

  constructor(event: Thwarted) {
    this._event = event;
  }

  get attacker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get defender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sourceId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get targetId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EtherFreakers__combatMultipliersResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class EtherFreakers__energyBalancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class EtherFreakers__freakersResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;

  constructor(
    value0: i32,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }
}

export class EtherFreakers__speciesCountersResult {
  value0: i32;
  value1: i32;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: i32;
  value6: i32;
  value7: i32;

  constructor(
    value0: i32,
    value1: i32,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: i32,
    value6: i32,
    value7: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromI32(this.value0));
    map.set("value1", ethereum.Value.fromI32(this.value1));
    map.set("value2", ethereum.Value.fromI32(this.value2));
    map.set("value3", ethereum.Value.fromI32(this.value3));
    map.set("value4", ethereum.Value.fromI32(this.value4));
    map.set("value5", ethereum.Value.fromI32(this.value5));
    map.set("value6", ethereum.Value.fromI32(this.value6));
    map.set("value7", ethereum.Value.fromI32(this.value7));
    return map;
  }
}

export class EtherFreakers extends ethereum.SmartContract {
  static bind(address: Address): EtherFreakers {
    return new EtherFreakers("EtherFreakers", address);
  }

  attack(sourceId: BigInt, targetId: BigInt): boolean {
    let result = super.call("attack", "attack(uint128,uint128):(bool)", [
      ethereum.Value.fromUnsignedBigInt(sourceId),
      ethereum.Value.fromUnsignedBigInt(targetId)
    ]);

    return result[0].toBoolean();
  }

  try_attack(sourceId: BigInt, targetId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("attack", "attack(uint128,uint128):(bool)", [
      ethereum.Value.fromUnsignedBigInt(sourceId),
      ethereum.Value.fromUnsignedBigInt(targetId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  attackPower(freakerId: BigInt): BigInt {
    let result = super.call("attackPower", "attackPower(uint128):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(freakerId)
    ]);

    return result[0].toBigInt();
  }

  try_attackPower(freakerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "attackPower",
      "attackPower(uint128):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(freakerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  birthCertificates(param0: BigInt): BigInt {
    let result = super.call(
      "birthCertificates",
      "birthCertificates(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBigInt();
  }

  try_birthCertificates(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "birthCertificates",
      "birthCertificates(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  combatMultipliers(param0: Address): EtherFreakers__combatMultipliersResult {
    let result = super.call(
      "combatMultipliers",
      "combatMultipliers(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new EtherFreakers__combatMultipliersResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_combatMultipliers(
    param0: Address
  ): ethereum.CallResult<EtherFreakers__combatMultipliersResult> {
    let result = super.tryCall(
      "combatMultipliers",
      "combatMultipliers(address):(uint128,uint128)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EtherFreakers__combatMultipliersResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  creatorIndex(): BigInt {
    let result = super.call("creatorIndex", "creatorIndex():(uint128)", []);

    return result[0].toBigInt();
  }

  try_creatorIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("creatorIndex", "creatorIndex():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  defendPower(freakerId: BigInt): BigInt {
    let result = super.call("defendPower", "defendPower(uint128):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(freakerId)
    ]);

    return result[0].toBigInt();
  }

  try_defendPower(freakerId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "defendPower",
      "defendPower(uint128):(uint128)",
      [ethereum.Value.fromUnsignedBigInt(freakerId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  energyBalances(param0: BigInt): EtherFreakers__energyBalancesResult {
    let result = super.call(
      "energyBalances",
      "energyBalances(uint128):(uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new EtherFreakers__energyBalancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_energyBalances(
    param0: BigInt
  ): ethereum.CallResult<EtherFreakers__energyBalancesResult> {
    let result = super.tryCall(
      "energyBalances",
      "energyBalances(uint128):(uint128,uint128)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EtherFreakers__energyBalancesResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  energyOf(tokenId: BigInt): BigInt {
    let result = super.call("energyOf", "energyOf(uint128):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBigInt();
  }

  try_energyOf(tokenId: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("energyOf", "energyOf(uint128):(uint128)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  freakerIndex(): BigInt {
    let result = super.call("freakerIndex", "freakerIndex():(uint128)", []);

    return result[0].toBigInt();
  }

  try_freakerIndex(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("freakerIndex", "freakerIndex():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  freakers(param0: BigInt): EtherFreakers__freakersResult {
    let result = super.call(
      "freakers",
      "freakers(uint128):(uint8,uint8,uint8,uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new EtherFreakers__freakersResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32()
    );
  }

  try_freakers(
    param0: BigInt
  ): ethereum.CallResult<EtherFreakers__freakersResult> {
    let result = super.tryCall(
      "freakers",
      "freakers(uint128):(uint8,uint8,uint8,uint8,uint8,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EtherFreakers__freakersResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32()
      )
    );
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCreator(tokenId: BigInt): boolean {
    let result = super.call("isCreator", "isCreator(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isCreator(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCreator", "isCreator(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isEnlightened(tokenId: BigInt): boolean {
    let result = super.call("isEnlightened", "isEnlightened(uint128):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isEnlightened(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEnlightened",
      "isEnlightened(uint128):(bool)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isFreaker(tokenId: BigInt): boolean {
    let result = super.call("isFreaker", "isFreaker(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_isFreaker(tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isFreaker", "isFreaker(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  middlePrice(): BigInt {
    let result = super.call("middlePrice", "middlePrice():(uint256)", []);

    return result[0].toBigInt();
  }

  try_middlePrice(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("middlePrice", "middlePrice():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  numTokens(): BigInt {
    let result = super.call("numTokens", "numTokens():(uint128)", []);

    return result[0].toBigInt();
  }

  try_numTokens(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("numTokens", "numTokens():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  speciesCounters(param0: Address): EtherFreakers__speciesCountersResult {
    let result = super.call(
      "speciesCounters",
      "speciesCounters(address):(int32,int32,int32,int32,int32,int32,int32,int32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new EtherFreakers__speciesCountersResult(
      result[0].toI32(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toI32(),
      result[6].toI32(),
      result[7].toI32()
    );
  }

  try_speciesCounters(
    param0: Address
  ): ethereum.CallResult<EtherFreakers__speciesCountersResult> {
    let result = super.tryCall(
      "speciesCounters",
      "speciesCounters(address):(int32,int32,int32,int32,int32,int32,int32,int32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new EtherFreakers__speciesCountersResult(
        value[0].toI32(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toI32(),
        value[6].toI32(),
        value[7].toI32()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalFortune(): BigInt {
    let result = super.call("totalFortune", "totalFortune():(uint128)", []);

    return result[0].toBigInt();
  }

  try_totalFortune(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalFortune", "totalFortune():(uint128)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get author(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class AttackCall extends ethereum.Call {
  get inputs(): AttackCall__Inputs {
    return new AttackCall__Inputs(this);
  }

  get outputs(): AttackCall__Outputs {
    return new AttackCall__Outputs(this);
  }
}

export class AttackCall__Inputs {
  _call: AttackCall;

  constructor(call: AttackCall) {
    this._call = call;
  }

  get sourceId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get targetId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AttackCall__Outputs {
  _call: AttackCall;

  constructor(call: AttackCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BirthCall extends ethereum.Call {
  get inputs(): BirthCall__Inputs {
    return new BirthCall__Inputs(this);
  }

  get outputs(): BirthCall__Outputs {
    return new BirthCall__Outputs(this);
  }
}

export class BirthCall__Inputs {
  _call: BirthCall;

  constructor(call: BirthCall) {
    this._call = call;
  }
}

export class BirthCall__Outputs {
  _call: BirthCall;

  constructor(call: BirthCall) {
    this._call = call;
  }
}

export class BirthToCall extends ethereum.Call {
  get inputs(): BirthToCall__Inputs {
    return new BirthToCall__Inputs(this);
  }

  get outputs(): BirthToCall__Outputs {
    return new BirthToCall__Outputs(this);
  }
}

export class BirthToCall__Inputs {
  _call: BirthToCall;

  constructor(call: BirthToCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class BirthToCall__Outputs {
  _call: BirthToCall;

  constructor(call: BirthToCall) {
    this._call = call;
  }
}

export class ChargeCall extends ethereum.Call {
  get inputs(): ChargeCall__Inputs {
    return new ChargeCall__Inputs(this);
  }

  get outputs(): ChargeCall__Outputs {
    return new ChargeCall__Outputs(this);
  }
}

export class ChargeCall__Inputs {
  _call: ChargeCall;

  constructor(call: ChargeCall) {
    this._call = call;
  }

  get freakerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChargeCall__Outputs {
  _call: ChargeCall;

  constructor(call: ChargeCall) {
    this._call = call;
  }
}

export class DischargeCall extends ethereum.Call {
  get inputs(): DischargeCall__Inputs {
    return new DischargeCall__Inputs(this);
  }

  get outputs(): DischargeCall__Outputs {
    return new DischargeCall__Outputs(this);
  }
}

export class DischargeCall__Inputs {
  _call: DischargeCall;

  constructor(call: DischargeCall) {
    this._call = call;
  }

  get freakerId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DischargeCall__Outputs {
  _call: DischargeCall;

  constructor(call: DischargeCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class TapCall extends ethereum.Call {
  get inputs(): TapCall__Inputs {
    return new TapCall__Inputs(this);
  }

  get outputs(): TapCall__Outputs {
    return new TapCall__Outputs(this);
  }
}

export class TapCall__Inputs {
  _call: TapCall;

  constructor(call: TapCall) {
    this._call = call;
  }

  get creatorId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class TapCall__Outputs {
  _call: TapCall;

  constructor(call: TapCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}
