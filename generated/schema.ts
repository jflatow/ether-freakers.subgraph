// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Approval extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Approval entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Approval entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Approval", id.toString(), this);
  }

  static load(id: string): Approval | null {
    return store.get("Approval", id) as Approval | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get approved(): Bytes {
    let value = this.get("approved");
    return value.toBytes();
  }

  set approved(value: Bytes) {
    this.set("approved", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}

export class ApprovalForAll extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save ApprovalForAll entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save ApprovalForAll entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("ApprovalForAll", id.toString(), this);
  }

  static load(id: string): ApprovalForAll | null {
    return store.get("ApprovalForAll", id) as ApprovalForAll | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get approved(): boolean {
    let value = this.get("approved");
    return value.toBoolean();
  }

  set approved(value: boolean) {
    this.set("approved", Value.fromBoolean(value));
  }
}

export class Born extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Born entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Born entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Born", id.toString(), this);
  }

  static load(id: string): Born | null {
    return store.get("Born", id) as Born | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get mother(): Bytes {
    let value = this.get("mother");
    return value.toBytes();
  }

  set mother(value: Bytes) {
    this.set("mother", Value.fromBytes(value));
  }

  get energy(): BigInt {
    let value = this.get("energy");
    return value.toBigInt();
  }

  set energy(value: BigInt) {
    this.set("energy", Value.fromBigInt(value));
  }

  get freakerId(): BigInt {
    let value = this.get("freakerId");
    return value.toBigInt();
  }

  set freakerId(value: BigInt) {
    this.set("freakerId", Value.fromBigInt(value));
  }

  get freaker_species(): i32 {
    let value = this.get("freaker_species");
    return value.toI32();
  }

  set freaker_species(value: i32) {
    this.set("freaker_species", Value.fromI32(value));
  }

  get freaker_stamina(): i32 {
    let value = this.get("freaker_stamina");
    return value.toI32();
  }

  set freaker_stamina(value: i32) {
    this.set("freaker_stamina", Value.fromI32(value));
  }

  get freaker_fortune(): i32 {
    let value = this.get("freaker_fortune");
    return value.toI32();
  }

  set freaker_fortune(value: i32) {
    this.set("freaker_fortune", Value.fromI32(value));
  }

  get freaker_agility(): i32 {
    let value = this.get("freaker_agility");
    return value.toI32();
  }

  set freaker_agility(value: i32) {
    this.set("freaker_agility", Value.fromI32(value));
  }

  get freaker_offense(): i32 {
    let value = this.get("freaker_offense");
    return value.toI32();
  }

  set freaker_offense(value: i32) {
    this.set("freaker_offense", Value.fromI32(value));
  }

  get freaker_defense(): i32 {
    let value = this.get("freaker_defense");
    return value.toI32();
  }

  set freaker_defense(value: i32) {
    this.set("freaker_defense", Value.fromI32(value));
  }
}

export class Captured extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Captured entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Captured entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Captured", id.toString(), this);
  }

  static load(id: string): Captured | null {
    return store.get("Captured", id) as Captured | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get attacker(): Bytes {
    let value = this.get("attacker");
    return value.toBytes();
  }

  set attacker(value: Bytes) {
    this.set("attacker", Value.fromBytes(value));
  }

  get defender(): Bytes {
    let value = this.get("defender");
    return value.toBytes();
  }

  set defender(value: Bytes) {
    this.set("defender", Value.fromBytes(value));
  }

  get sourceId(): BigInt {
    let value = this.get("sourceId");
    return value.toBigInt();
  }

  set sourceId(value: BigInt) {
    this.set("sourceId", Value.fromBigInt(value));
  }

  get targetId(): BigInt {
    let value = this.get("targetId");
    return value.toBigInt();
  }

  set targetId(value: BigInt) {
    this.set("targetId", Value.fromBigInt(value));
  }
}

export class Missed extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Missed entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Missed entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Missed", id.toString(), this);
  }

  static load(id: string): Missed | null {
    return store.get("Missed", id) as Missed | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get attacker(): Bytes {
    let value = this.get("attacker");
    return value.toBytes();
  }

  set attacker(value: Bytes) {
    this.set("attacker", Value.fromBytes(value));
  }

  get defender(): Bytes {
    let value = this.get("defender");
    return value.toBytes();
  }

  set defender(value: Bytes) {
    this.set("defender", Value.fromBytes(value));
  }

  get sourceId(): BigInt {
    let value = this.get("sourceId");
    return value.toBigInt();
  }

  set sourceId(value: BigInt) {
    this.set("sourceId", Value.fromBigInt(value));
  }

  get targetId(): BigInt {
    let value = this.get("targetId");
    return value.toBigInt();
  }

  set targetId(value: BigInt) {
    this.set("targetId", Value.fromBigInt(value));
  }
}

export class Thwarted extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Thwarted entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Thwarted entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Thwarted", id.toString(), this);
  }

  static load(id: string): Thwarted | null {
    return store.get("Thwarted", id) as Thwarted | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get attacker(): Bytes {
    let value = this.get("attacker");
    return value.toBytes();
  }

  set attacker(value: Bytes) {
    this.set("attacker", Value.fromBytes(value));
  }

  get defender(): Bytes {
    let value = this.get("defender");
    return value.toBytes();
  }

  set defender(value: Bytes) {
    this.set("defender", Value.fromBytes(value));
  }

  get sourceId(): BigInt {
    let value = this.get("sourceId");
    return value.toBigInt();
  }

  set sourceId(value: BigInt) {
    this.set("sourceId", Value.fromBigInt(value));
  }

  get targetId(): BigInt {
    let value = this.get("targetId");
    return value.toBigInt();
  }

  set targetId(value: BigInt) {
    this.set("targetId", Value.fromBigInt(value));
  }
}

export class Transfer extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Transfer entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Transfer entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Transfer", id.toString(), this);
  }

  static load(id: string): Transfer | null {
    return store.get("Transfer", id) as Transfer | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get from(): Bytes {
    let value = this.get("from");
    return value.toBytes();
  }

  set from(value: Bytes) {
    this.set("from", Value.fromBytes(value));
  }

  get to(): Bytes {
    let value = this.get("to");
    return value.toBytes();
  }

  set to(value: Bytes) {
    this.set("to", Value.fromBytes(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }
}
